@model Fundable
@{
    ViewBag.Title = "Fundable " + Model.FundableId;
}
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">@Html.ActionLink("Home", "Index", "Home")</li>
        <li class="breadcrumb-item">@Html.ListActionLink("Fundables", "Index", null)</li>
        <li class="breadcrumb-item active" aria-current="page"><strong>@ViewBag.Title</strong></li>
    </ol>
</nav>
@using (Html.ListBeginForm("DetailSubmit", "Fundable", FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.HiddenFor(m => m.FundableId)
    @using (Html.BootstrapBeginForm().ForDisplay())
    {
        @Html.BootstrapDisplay(m => m.FundableId)
        if (Model.FundableReference != null)
        {
            var fundableReference = RichTodd.QuiltSystem.Service.Base.ParseReferenceValues.From(Model.FundableReference);
            var fundableReferenceText = fundableReference.ToString();
            @Html.BootstrapDisplay(m => fundableReferenceText, labelFormat: "Fundable Reference", link: Url.Action(fundableReference))
        }
        @Html.BootstrapDisplay(m => m.FundsRequiredTotal)
        @Html.BootstrapDisplay(m => m.FundsRequiredIncome)
        @Html.BootstrapDisplay(m => m.FundsRequiredSalesTax)
        @Html.BootstrapDisplay(m => m.FundsRequiredSalesTaxJurisdiction)
        @Html.BootstrapDisplay(m => m.FundsReceived)
        @Html.BootstrapDisplay(m => m.UpdateDateTime)
    }
    @if (Is.Populated(Model.Funders))
    {
        <div class="card mt-3">
            <h5 class="card-header">Funders <button class="btn btn-sm btn-primary" type="button" data-toggle="collapse" data-target="#funderCard">Show</button></h5>
            <div class="collapse" id="funderCard">
                <table class="card-body mb-0 @Css.DetailTable">
                    <thead class="@Css.DetailTableHead">
                        <tr>
                            <th></th>
                            <th>Funder ID</th>
                            <th>Funder Reference</th>
                        </tr>
                    </thead>
                    <tbody class="@Css.DetailTableBody">
                        @foreach (var funder in Model.Funders)
                        {
                            <tr class="@Css.DetailTableRow">
                                <td>@Html.BootstrapActionLink("View", "Index", "Funder", new { id = funder.FunderId })</td>
                                <td>@Html.DisplayFor(m => funder.FunderId)</td>
                                <td>@Html.DisplayFor(m => funder.FunderReference)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    @if (Is.Populated(Model.Transactions))
    {
        <div class="card mt-3">
            <h5 class="card-header">Transactions <button class="btn btn-sm btn-primary" type="button" data-toggle="collapse" data-target="#transactionCard">Show</button></h5>
            <div class="collapse" id="transactionCard">
                <table class="card-body mb-0 @Css.DetailTable">
                    <thead class="@Css.DetailTableHead">
                        <tr>
                            <th>ID</th>
                            <th>Description</th>
                            <th>Unit of Work</th>
                            <th>Transaction Date/Time</th>
                        </tr>
                    </thead>
                    <tbody class="@Css.DetailTableBody">
                        @foreach (var transaction in Model.Transactions)
                        {
                            <tr class="@Css.DetailTableRow">
                                <td>@Html.DisplayFor(m => transaction.Id)</td>
                                <td class="text-nowrap">@Html.DisplayForMultilineText(m => transaction.Description)</td>
                                <td>@Html.ActionLink(transaction.UnitOfWork, "Index", "Transaction", new { unitOfWork = transaction.UnitOfWork })</td>
                                <td>@Html.DisplayFor(m => transaction.TransactionDateTime)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    @if (Is.Populated(Model.Events))
    {
        <div class="card mt-3">
            <h5 class="card-header">Events <button class="btn btn-sm btn-primary" type="button" data-toggle="collapse" data-target="#eventCard">Show</button></h5>
            <div class="collapse" id="eventCard">
                <table class="card-body mb-0 @Css.DetailTable">
                    <thead class="@Css.DetailTableHead">
                        <tr>
                            <th>ID</th>
                            <th>Event Type</th>
                            <th>Event Date/TIme</th>
                            <th>Processing Status</th>
                            <th>Status Date/Time</th>
                            <th>Unif of Work</th>
                        </tr>
                    </thead>
                    <tbody class="@Css.DetailTableBody">
                        @foreach (var _event in Model.Events)
                        {
                            <tr class="@Css.DetailTableRow">
                                <td>@Html.DisplayFor(m => _event.Id)</td>
                                <td>@Html.DisplayFor(m => _event.EventTypeCode)</td>
                                <td>@Html.DisplayFor(m => _event.EventDateTime)</td>
                                <td>@Html.DisplayFor(m => _event.ProcessingStatusCode)</td>
                                <td>@Html.DisplayFor(m => _event.StatusDateTime)</td>
                                <td>@Html.ActionLink(_event.UnitOfWork, "Index", "Event", new { unitOfWork = _event.UnitOfWork })</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
}